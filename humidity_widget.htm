<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Relative Humidity Calculator</title>

    <!-- Load Chart.js and Annotations Plugin -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation"></script>

    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 20px;
        }
        .container {
            max-width: 600px;
            margin: auto;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            background-color: #f9f9f9;
        }
        label {
            display: block;
            margin: 10px 0 5px;
        }
        input {
            width: 100%;
            padding: 8px;
            margin-bottom: 15px;
        }
        canvas {
            margin-top: 20px;
        }
        .unit-toggle {
            display: inline-block;
            cursor: pointer;
            background: #007bff;
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 10px;
        }
        .unit-toggle:hover {
            background: #0056b3;
        }
    </style>
</head>
<body>

    <div class="container">
        <h2>Relative Humidity Calculator</h2>
        <p>Convert relative humidity at one temperature to another and visualize the relationship.</p>

        <label for="rh1">Initial Relative Humidity (%):</label>
        <input type="number" id="rh1" value="50" min="0" max="100">

        <label for="t1">Initial Temperature (<span id="unitLabel">°F</span>):</label>
        <input type="number" id="t1" value="70" min="-50" max="150">

        <label for="t2">Target Temperature (<span id="unitLabel2">°F</span>):</label>
        <input type="number" id="t2" value="90" min="-50" max="150">

        <div class="unit-toggle" onclick="toggleUnit()">Switch to °C</div>

        <button onclick="updateChart()">Calculate & Plot</button>

        <h3 id="rh2Output"></h3>

        <canvas id="rhChart"></canvas>
    </div>

    <script>
        // Utility functions for temperature conversion
        const fahrenheitToCelsius = (f) => (f - 32) * 5 / 9;
        const celsiusToFahrenheit = (c) => (c * 9 / 5) + 32;

        // Saturation vapor pressure (Tetens formula)
        const saturationVaporPressure = (T) => 6.112 * Math.exp((17.62 * T) / (T + 243.12));

        // Calculate RH at T2
        function calculateRH(RH1, T1, T2) {
            const e_s_T1 = saturationVaporPressure(T1);
            const e_s_T2 = saturationVaporPressure(T2);
            return Math.min(Math.max(RH1 * (e_s_T1 / e_s_T2), 0), 100);
        }

        let myChart;
        let unit = "F"; // Default unit

        function updateChart() {
            const RH1 = parseFloat(document.getElementById("rh1").value);
            let T1 = parseFloat(document.getElementById("t1").value);
            let T2 = parseFloat(document.getElementById("t2").value);

            if (unit === "F") {
                T1 = fahrenheitToCelsius(T1);
                T2 = fahrenheitToCelsius(T2);
            }

            if (isNaN(RH1) || isNaN(T1) || isNaN(T2)) {
                alert("Please enter valid numbers for RH and Temperature.");
                return;
            }

            const RH2 = calculateRH(RH1, T1, T2);
            document.getElementById("rh2Output").innerText = `RH at ${T2.toFixed(2)}°${unit}: ${RH2.toFixed(2)}%`;

            const ctx = document.getElementById("rhChart").getContext("2d");

            // Define temperature range dynamically
            const tempMin = unit === "F" ? 0 : -20;
            const tempMax = unit === "F" ? 100 : 50;
            const temperatures = Array.from({ length: tempMax - tempMin + 1 }, (_, i) => i + tempMin);
            const humidityValues = temperatures.map(t => calculateRH(RH1, T1, unit === "F" ? fahrenheitToCelsius(t) : t));

            if (myChart) myChart.destroy(); // Destroy old chart before creating a new one

            myChart = new Chart(ctx, {
                type: "line",
                data: {
                    labels: temperatures,
                    datasets: [{
                        label: `Relative Humidity vs Temperature (${unit})`,
                        data: humidityValues,
                        borderColor: "blue",
                        borderWidth: 2,
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        annotation: {
                            annotations: {
                                line1: {
                                    type: "line",
                                    xMin: T1,
                                    xMax: T1,
                                    borderColor: "red",
                                    borderWidth: 2,
                                    label: { content: `T1: ${T1.toFixed(1)}°${unit}`, enabled: true, position: "top" }
                                },
                                line2: {
                                    type: "line",
                                    xMin: T2,
                                    xMax: T2,
                                    borderColor: "green",
                                    borderWidth: 2,
                                    label: { content: `T2: ${T2.toFixed(1)}°${unit}`, enabled: true, position: "top" }
                                }
                            }
                        }
                    },
                    scales: {
                        x: { 
                            title: { display: true, text: `Temperature (${unit})` },
                            type: "linear",
                            ticks: { stepSize: 10 }
                        },
                        y: { 
                            min: 0, 
                            max: 100, 
                            title: { display: true, text: "Relative Humidity (%)" } 
                        }
                    }
                }
            });
        }

        function toggleUnit() {
            const t1Input = document.getElementById("t1");
            const t2Input = document.getElementById("t2");

            if (unit === "F") {
                t1Input.value = fahrenheitToCelsius(parseFloat(t1Input.value)).toFixed(1);
                t2Input.value = fahrenheitToCelsius(parseFloat(t2Input.value)).toFixed(1);
                unit = "C";
                document.querySelector(".unit-toggle").innerText = "Switch to °F";
            } else {
                t1Input.value = celsiusToFahrenheit(parseFloat(t1Input.value)).toFixed(1);
                t2Input.value = celsiusToFahrenheit(parseFloat(t2Input.value)).toFixed(1);
                unit = "F";
                document.querySelector(".unit-toggle").innerText = "Switch to °C";
            }

            document.getElementById("unitLabel").innerText = `°${unit}`;
            document.getElementById("unitLabel2").innerText = `°${unit}`;

            updateChart(); // Refresh chart after conversion
        }

        document.addEventListener("DOMContentLoaded", updateChart);
    </script>

</body>
</html>
